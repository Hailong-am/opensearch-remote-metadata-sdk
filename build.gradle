import org.opensearch.gradle.test.RestIntegTestTask

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'java-library'
apply plugin: 'eclipse'
apply plugin: 'com.diffplug.spotless'
apply from: 'formatter/formatting.gradle'

group = "RenameGroup"

java {
    targetCompatibility = JavaVersion.VERSION_21
    sourceCompatibility = JavaVersion.VERSION_21
}

buildscript {
    ext {
        opensearch_version = System.getProperty("opensearch.version", "3.0.0-SNAPSHOT")
    }

    repositories {
        mavenLocal()
        maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.opensearch.gradle:build-tools:${opensearch_version}"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:6.25.0"
    }
}

repositories {
    mavenLocal()
    maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
}

dependencies {
    implementation "org.opensearch:opensearch:${opensearch_version}"
    implementation 'org.apache.logging.log4j:log4j-api:2.24.2'
    implementation 'org.apache.logging.log4j:log4j-core:2.24.2'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.18.2'

    // For Remote Client: TODO move to new module with SPI
    implementation "org.opensearch.client:opensearch-java:2.10.2"
    api "org.apache.httpcomponents.client5:httpclient5:5.3.1"
    api "org.apache.httpcomponents.core5:httpcore5:5.2.5"

    // For AWS OpenSearch Service dependency (may need some DDB below): TODO move to new module with SPI
    implementation("software.amazon.awssdk:apache-client:2.25.40")

    // For DDB Client: TODO move to new module with SPI
    implementation("software.amazon.awssdk:sdk-core:2.25.40")
    implementation("software.amazon.awssdk:aws-core:2.25.40")
    implementation "software.amazon.awssdk:aws-json-protocol:2.25.40"
    implementation("software.amazon.awssdk:auth:2.25.40")
    implementation("software.amazon.awssdk:checksums:2.25.40")
    implementation("software.amazon.awssdk:checksums-spi:2.25.40")
    implementation("software.amazon.awssdk:dynamodb:2.25.40")
    implementation("software.amazon.awssdk:endpoints-spi:2.25.40")
    implementation("software.amazon.awssdk:http-auth-aws:2.25.40")
    implementation("software.amazon.awssdk:http-auth-spi:2.25.40")
    implementation("software.amazon.awssdk:http-client-spi:2.25.40")
    implementation("software.amazon.awssdk:identity-spi:2.25.40")
    implementation "software.amazon.awssdk:json-utils:2.25.40"
    implementation "software.amazon.awssdk:metrics-spi:2.25.40"
    implementation("software.amazon.awssdk:profiles:2.25.40")
    implementation "software.amazon.awssdk:protocol-core:2.25.40"
    implementation("software.amazon.awssdk:regions:2.25.40")
    implementation "software.amazon.awssdk:third-party-jackson-core:2.25.40"
    implementation("software.amazon.awssdk:url-connection-client:2.25.40")
    implementation("software.amazon.awssdk:utils:2.25.40")

    testImplementation "org.opensearch.test:framework:${opensearch_version}"
    testImplementation 'org.junit.jupiter:junit-jupiter:5.11.3'
    testImplementation 'org.mockito:mockito-core:5.14.2'
}

test {
    include '**/*Tests.class'
    systemProperty 'tests.security.manager', 'false'
    useJUnitPlatform()
    outputs.upToDateWhen { false }
    testLogging {
        events "failed", "skipped"
        showExceptions true
        showCauses true
        showStackTraces true
        exceptionFormat "full"
    }
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
}

task integTest(type: RestIntegTestTask) {
    description = "Run tests against a cluster"
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
}
tasks.named("check").configure { dependsOn(integTest) }

integTest {
    // The --debug-jvm command-line option makes the cluster debuggable; this makes the tests debuggable
    if (System.getProperty("test.debug") != null) {
        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005'
    }
}

// updateVersion: Task to auto update version to the next development iteration
task updateVersion {
    onlyIf { System.getProperty('newVersion') }
    doLast {
        ext.newVersion = System.getProperty('newVersion')
        println "Setting version to ${newVersion}."
         // String tokenization to support -SNAPSHOT
        ant.replaceregexp(file:'build.gradle', match: '"opensearch.version", "\\d.*"', replace: '"opensearch.version", "' + newVersion.tokenize('-')[0] + '-SNAPSHOT"', flags:'g', byline:true)
    }
}
