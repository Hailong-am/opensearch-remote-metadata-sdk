apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'java-library'
apply plugin: 'eclipse'
apply plugin: 'com.diffplug.spotless'
apply from: 'formatter/formatting.gradle'

buildscript {
    ext {
        opensearchVersion = System.getProperty("opensearch.version", "3.0.0-SNAPSHOT")
        log4jVersion = '2.24.2'
        jacksonVersion = '2.18.2'
        apacheHttpComponentsVersion = '5.3.1'
        apacheHttpCoreVersion = '5.2.5'
        awsSdkVersion = '2.25.40'
        junitVersion = '5.11.3'
        mockitoVersion = '5.14.2'
    }

    repositories {
        mavenLocal()
        maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.opensearch.gradle:build-tools:${opensearchVersion}"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:6.25.0"
    }
}

repositories {
    mavenLocal()
    maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
}

java {
    targetCompatibility = JavaVersion.VERSION_21
    sourceCompatibility = JavaVersion.VERSION_21
}

dependencies {
    implementation "org.opensearch:opensearch:${opensearchVersion}"
    implementation "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    implementation "org.apache.logging.log4j:log4j-core:${log4jVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"

    // For Remote Client: TODO move to new module with SPI
    implementation "org.opensearch.client:opensearch-java:2.10.2"
    api "org.apache.httpcomponents.client5:httpclient5:${apacheHttpComponentsVersion}"
    api "org.apache.httpcomponents.core5:httpcore5:${apacheHttpCoreVersion}"

    // For AWS OpenSearch Service and DDB Client: TODO move to new module with SPI
    implementation(platform("software.amazon.awssdk:bom:${awsSdkVersion}"))
    implementation("software.amazon.awssdk:apache-client")
    implementation("software.amazon.awssdk:sdk-core")
    implementation("software.amazon.awssdk:aws-core")
    implementation("software.amazon.awssdk:aws-json-protocol")
    implementation("software.amazon.awssdk:auth")
    implementation("software.amazon.awssdk:checksums")
    implementation("software.amazon.awssdk:checksums-spi")
    implementation("software.amazon.awssdk:dynamodb")
    implementation("software.amazon.awssdk:endpoints-spi")
    implementation("software.amazon.awssdk:http-auth-aws")
    implementation("software.amazon.awssdk:http-auth-spi")
    implementation("software.amazon.awssdk:http-client-spi")
    implementation("software.amazon.awssdk:identity-spi")
    implementation("software.amazon.awssdk:json-utils")
    implementation("software.amazon.awssdk:metrics-spi")
    implementation("software.amazon.awssdk:profiles")
    implementation("software.amazon.awssdk:protocol-core")
    implementation("software.amazon.awssdk:regions")
    implementation("software.amazon.awssdk:third-party-jackson-core")
    implementation("software.amazon.awssdk:url-connection-client")
    implementation("software.amazon.awssdk:utils")

    testImplementation "org.opensearch.test:framework:${opensearchVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
}

test {
    include '**/*Tests.class'
    systemProperty 'tests.security.manager', 'false'
    useJUnitPlatform()
    outputs.upToDateWhen { false }
    testLogging {
        events "failed", "skipped"
        showExceptions true
        showCauses true
        showStackTraces true
        exceptionFormat "full"
    }
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
}

// updateVersion: Task to auto update version to the next development iteration
task updateVersion {
    onlyIf { System.getProperty('newVersion') }
    doLast {
        ext.newVersion = System.getProperty('newVersion')
        println "Setting version to ${newVersion}."
         // String tokenization to support -SNAPSHOT
        ant.replaceregexp(file:'build.gradle', match: '"opensearch.version", "\\d.*"', replace: '"opensearch.version", "' + newVersion.tokenize('-')[0] + '-SNAPSHOT"', flags:'g', byline:true)
    }
}
